"use strict";
//* THERE IS A THIRD WAY OF IMPLEMENTING PROTOTYPAL INHERITANCE R DELEGATION.
//* WE CAN USE A FUNCTION CALLED OBJECT.CREATE WHICH WORKS IN A DIFFERENT WAY THAN CONSTRUCTOR FUNCTIONS AND CLASSES.
//* THERE IS STILL AN IDEA OF PROTOTYPAL INHERITANCE, HOWEVER THERE ARE NO PROTOTYPE PROPERTIES INVOLVED AND ALSO NO CONSTRUCTOR FUNCTIONS AND NO NEW OPERATOR
//* WE CAN USE OBJECT.CREATE TO SET PROTOTYPE OF AN OBJECT TO ANY OTHER OBJECT MANUALLY THAT WE WANT.

const PersonProto = {
  calcAge() {
    console.log(this.firstName);
    console.log(2024 - this.birthYear);
  },

  //* WE CREATED THIS METHOD TO CREATE PROPERTIES FOR OBJECTS PROGRAMMATICALLY
  //* IT IS NOT A CONSTRUCTOR FUNCTION BECAUSE WE DO NOT CALL IT WITH THE NEW KEYWORD.
  init(firstName, birthYear) {
    this.firstName = firstName;
    this.birthYear = birthYear;
  },
};

//* WE CREATED AN OBJECT NAME person, WE USED OBJECT.CREATE, TO MAKE THE PERSONPROTO OBJECT TO BE PROTOTYPE PROPERTY OF person
//* PERSON.PROTO SHOULD BE THE PROTOTYPE OF PERSON(EXPLICITLY)
const person = Object.create(PersonProto);
person.name = "Abuzar";
person.birthYear = 2002.5;
console.log(person);
person.calcAge();

console.log(person.__proto__); //* PERSONPROTO
console.log(person.__proto__ === PersonProto); //* TRUE

const sarah = Object.create(PersonProto);
sarah.init("sarah", 2002);
sarah.calcAge(); // sarah , 22

//* OBJECT.CREATE CREATES A NEW OBJECT AND THE PROTOTYPE OF THAT OBJECT WILL BE THE OBJECT THAT WE PASSED IN.
//* WE WILL USE OBJECT.CREATE IN TRUE CLASS INHERITANCE WHERE WE WILL LINK OBJECTS TO ONE ANOTHER THROUGH OBJECT.CREATE METHOD.
